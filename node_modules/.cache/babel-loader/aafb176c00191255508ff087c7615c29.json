{"ast":null,"code":"var _jsxFileName = \"/home/massi/Desktop/projects/SnakeGameWithReact/src/App.js\";\nimport React, { Component } from \"react\";\nimport Snake from \"./snake\";\nimport SnakeFood from \"./Food\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getRandomCoordinates = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  return [x, y];\n};\n\nconst initState = {\n  food: getRandomCoordinates(),\n  speed: 500,\n  direction: \"Right\",\n  snakeDots: [[0, 0], [2, 0]]\n};\n\nclass App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = initState;\n\n    this.componentDidMount = () => {\n      setInterval(this.moveSnake, this.state.speed);\n      document.onkeydown = this.onkeydown;\n    };\n\n    this.componentDidUpdate = () => {\n      this.checkIfOutOfBorders();\n      this.checkIfCollapsed();\n      this.CheckIfEat();\n    };\n\n    this.onkeydown = e => {\n      e = e || window.event;\n\n      switch (e.keyCode) {\n        case 37:\n          this.setState({\n            direction: \"Left\"\n          });\n          break;\n\n        case 38:\n          this.setState({\n            direction: \"Up\"\n          });\n          break;\n\n        case 39:\n          this.setState({\n            direction: \"Right\"\n          });\n          break;\n\n        case 40:\n          this.setState({\n            direction: \"Down\"\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.moveSnake = () => {\n      let dots = [...this.state.snakeDots];\n      let head = dots[dots.length - 1];\n      let x = head[0];\n      let y = head[1];\n\n      switch (this.state.direction) {\n        case \"Right\":\n          head = [x, y + 2];\n          break;\n\n        case \"Left\":\n          head = [x, y - 2];\n          break;\n\n        case \"Up\":\n          head = [x - 2, y];\n          break;\n\n        default:\n          head = [x + 2, y];\n          break;\n      }\n\n      dots.push(head);\n      dots.shift();\n      this.setState({\n        snakeDots: dots\n      });\n    };\n\n    this.checkIfOutOfBorders = () => {\n      let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n\n      if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n        this.onGameOver();\n      }\n    };\n\n    this.checkIfCollapsed = () => {\n      let snake = [...this.state.snakeDots];\n      let head = snake[snake.length - 1];\n      snake.pop();\n      snake.forEach(dot => {\n        if (head[0] === dot[0] && head[1] === dot[1]) {\n          this.onGameOver();\n        }\n      });\n    };\n\n    this.CheckIfEat = () => {\n      let snake = [...this.state.snakeDots];\n      let head = snake[snake.length - 1];\n      let food = this.state.food;\n\n      if (head[0] === food[0] && head[1] === food[1]) {\n        this.setState({\n          food: getRandomCoordinates()\n        });\n        this.enlargeSnake();\n        this.increaseSpeed();\n      }\n    };\n\n    this.enlargeSnake = () => {\n      let newSnake = [...this.state.snakeDots];\n      newSnake.unshift([]);\n      this.setState({\n        snakeDots: newSnake\n      });\n    };\n\n    this.increaseSpeed = () => {\n      if (this.state.speed > 10) {\n        this.setState({\n          speed: this.state.speed - 10\n        });\n      }\n    };\n\n    this.onGameOver = () => {\n      alert(\"GAME OVER! YOUR RESULT IS: \" + this.state.snakeDots.length);\n      this.setState(initState);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center items-center h-screen bg-gradient-to-r from-yellow-300 to-black\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-area bg-gray-800 border-4 border-yellow-500 relative\",\n        children: [/*#__PURE__*/_jsxDEV(Snake, {\n          snakeDots: this.state.snakeDots\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SnakeFood, {\n          dot: this.state.food\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/massi/Desktop/projects/SnakeGameWithReact/src/App.js"],"names":["React","Component","Snake","SnakeFood","getRandomCoordinates","min","max","x","Math","floor","random","y","initState","food","speed","direction","snakeDots","App","state","componentDidMount","setInterval","moveSnake","document","onkeydown","componentDidUpdate","checkIfOutOfBorders","checkIfCollapsed","CheckIfEat","e","window","event","keyCode","setState","dots","head","length","push","shift","onGameOver","snake","pop","forEach","dot","enlargeSnake","increaseSpeed","newSnake","unshift","alert","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Snake from \"./snake\";\nimport SnakeFood from \"./Food\";\n\nconst getRandomCoordinates = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  return [x, y];\n};\n\nconst initState = {\n  food: getRandomCoordinates(),\n  speed: 500,\n  direction: \"Right\",\n  snakeDots: [\n    [0, 0],\n    [2, 0],\n  ],\n};\n\nclass App extends Component {\n  state = initState;\n\n  componentDidMount = () => {\n    setInterval(this.moveSnake, this.state.speed);\n    document.onkeydown = this.onkeydown;\n  };\n\n  componentDidUpdate = () => {\n    this.checkIfOutOfBorders();\n    this.checkIfCollapsed();\n    this.CheckIfEat();\n  };\n\n  onkeydown = (e) => {\n    e = e || window.event;\n    switch (e.keyCode) {\n      case 37:\n        this.setState({ direction: \"Left\" });\n        break;\n      case 38:\n        this.setState({ direction: \"Up\" });\n        break;\n      case 39:\n        this.setState({ direction: \"Right\" });\n        break;\n      case 40:\n        this.setState({ direction: \"Down\" });\n        break;\n      default:\n        break;\n    }\n  };\n\n  moveSnake = () => {\n    let dots = [...this.state.snakeDots];\n    let head = dots[dots.length - 1];\n    let x = head[0];\n    let y = head[1];\n\n    switch (this.state.direction) {\n      case \"Right\":\n        head = [x, y + 2];\n        break;\n      case \"Left\":\n        head = [x, y - 2];\n        break;\n      case \"Up\":\n        head = [x - 2, y];\n        break;\n      default:\n        head = [x + 2, y];\n        break;\n    }\n\n    dots.push(head);\n    dots.shift();\n    this.setState({ snakeDots: dots });\n  };\n\n  checkIfOutOfBorders = () => {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      this.onGameOver();\n    }\n  };\n\n  checkIfCollapsed = () => {\n    let snake = [...this.state.snakeDots];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach((dot) => {\n      if (head[0] === dot[0] && head[1] === dot[1]) {\n        this.onGameOver();\n      }\n    });\n  };\n\n  CheckIfEat = () => {\n    let snake = [...this.state.snakeDots];\n    let head = snake[snake.length - 1];\n    let food = this.state.food;\n    if (head[0] === food[0] && head[1] === food[1]) {\n      this.setState({ food: getRandomCoordinates() });\n      this.enlargeSnake();\n      this.increaseSpeed();\n    }\n  };\n\n  enlargeSnake = () => {\n    let newSnake = [...this.state.snakeDots];\n    newSnake.unshift([]);\n    this.setState({\n      snakeDots: newSnake,\n    });\n  };\n\n  increaseSpeed = () => {\n    if (this.state.speed > 10) {\n      this.setState({\n        speed: this.state.speed - 10,\n      });\n    }\n  };\n\n  onGameOver = () => {\n    alert(\"GAME OVER! YOUR RESULT IS: \" + this.state.snakeDots.length);\n    this.setState(initState);\n  };\n\n  render() {\n    return (\n      <div className=\"flex justify-center items-center h-screen bg-gradient-to-r from-yellow-300 to-black\">\n        <div className=\"game-area bg-gray-800 border-4 border-yellow-500 relative\">\n          <Snake snakeDots={this.state.snakeDots} />\n          <SnakeFood dot={this.state.food} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}