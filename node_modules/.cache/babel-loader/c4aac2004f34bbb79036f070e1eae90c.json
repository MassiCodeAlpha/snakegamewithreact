{"ast":null,"code":"var _jsxFileName = \"/home/massi/Desktop/projects/SnakeGameWithReact/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport Snake from \"./snake\";\nimport SnakeFood from \"./Food\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getRandomCoordinates = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  return [x, y];\n};\n\nconst initState = {\n  food: getRandomCoordinates(),\n  speed: 500,\n  direction: \"Right\",\n  snakeDots: [[0, 0], [2, 0]]\n};\n\nclass App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = initState;\n\n    this.componentDidMount = e => {\n      setInterval(this.moveSnake, this.state.speed);\n      document.onkeydown = this.onkeydown;\n    };\n\n    this.componentDidUpdate = () => {\n      this.checkIfOutOfBorders();\n      this.checkIfCollapsed();\n      this.CheckIfEat();\n    };\n\n    this.onkeydown = e => {\n      e = e || window.event;\n      console.log(e.keyCode);\n\n      switch (e.keyCode) {\n        case 37:\n          this.setState({\n            direction: \"Left\"\n          });\n          break;\n\n        case 38:\n          this.setState({\n            direction: \"Up\"\n          });\n          break;\n\n        case 39:\n          this.setState({\n            direction: \"Right\"\n          });\n          break;\n\n        case 40:\n          this.setState({\n            direction: \"Down\"\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.moveSnake = () => {\n      let dots = [...this.state.snakeDots];\n      let head = dots[dots.length - 1];\n      let x = head[0];\n      let y = head[1];\n\n      switch (this.state.direction) {\n        case \"Right\":\n          head = [x, y + 2];\n          break;\n\n        case \"Left\":\n          head = [x, y - 2];\n          break;\n\n        case \"Up\":\n          head = [x - 2, y];\n          break;\n\n        default:\n          head = [x + 2, y];\n          break;\n      }\n\n      dots.push(head);\n      dots.shift();\n      this.setState({\n        snakeDots: dots\n      });\n    };\n\n    this.checkIfOutOfBorders = () => {\n      let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n\n      if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n        this.onGameOver();\n      }\n    };\n\n    this.checkIfCollapsed = () => {\n      let snake = [...this.state.snakeDots];\n      let head = snake[snake.length - 1];\n      snake.pop();\n      snake.forEach(dot => {\n        if (head[0] === dot[0] && head[1] === dot[1]) {\n          this.onGameOver();\n        }\n      });\n    };\n\n    this.CheckIfEat = () => {\n      let snake = [...this.state.snakeDots];\n      let head = snake[snake.length - 1];\n      let food = this.state.food;\n\n      if (head[0] === food[0] && head[1] === food[1]) {\n        this.setState({\n          food: getRandomCoordinates()\n        });\n        this.enlargeSnake();\n        this.increaseSpeed();\n      }\n    };\n\n    this.enlargeSnake = () => {\n      let newSnake = [...this.state.snakeDots];\n      newSnake.unshift([]);\n      this.setState({\n        snakeDots: newSnake\n      });\n    };\n\n    this.increaseSpeed = () => {\n      if (this.state.speed > 10) {\n        this.setState({\n          speed: this.state.speed - 10\n        });\n      }\n    };\n\n    this.onGameOver = () => {\n      alert(\"GAME OVER YOUR RESULT IS : \" + this.state.snakeDots.length);\n      this.setState(initState);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-area\",\n      children: [/*#__PURE__*/_jsxDEV(Snake, {\n        snakeDots: this.state.snakeDots\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SnakeFood, {\n        dot: this.state.food\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/massi/Desktop/projects/SnakeGameWithReact/src/App.js"],"names":["React","Component","Snake","SnakeFood","getRandomCoordinates","min","max","x","Math","floor","random","y","initState","food","speed","direction","snakeDots","App","state","componentDidMount","e","setInterval","moveSnake","document","onkeydown","componentDidUpdate","checkIfOutOfBorders","checkIfCollapsed","CheckIfEat","window","event","console","log","keyCode","setState","dots","head","length","push","shift","onGameOver","snake","pop","forEach","dot","enlargeSnake","increaseSpeed","newSnake","unshift","alert","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Snake from \"./snake\";\nimport SnakeFood from \"./Food\";\nconst getRandomCoordinates = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  return [x, y];\n};\nconst initState = {\n  food: getRandomCoordinates(),\n  speed: 500,\n  direction: \"Right\",\n  snakeDots: [\n    [0, 0],\n    [2, 0],\n  ],\n};\nclass App extends Component {\n  state = initState;\n  componentDidMount = (e) => {\n    setInterval(this.moveSnake, this.state.speed);\n    document.onkeydown = this.onkeydown;\n  };\n  componentDidUpdate = () => {\n    this.checkIfOutOfBorders();\n    this.checkIfCollapsed();\n    this.CheckIfEat();\n  };\n  onkeydown = (e) => {\n    e = e || window.event;\n    console.log(e.keyCode);\n    switch (e.keyCode) {\n      case 37:\n        this.setState({ direction: \"Left\" });\n        break;\n      case 38:\n        this.setState({ direction: \"Up\" });\n        break;\n      case 39:\n        this.setState({ direction: \"Right\" });\n        break;\n      case 40:\n        this.setState({ direction: \"Down\" });\n        break;\n      default:\n        break;\n    }\n  };\n  moveSnake = () => {\n    let dots = [...this.state.snakeDots];\n    let head = dots[dots.length - 1];\n    let x = head[0];\n    let y = head[1];\n    switch (this.state.direction) {\n      case \"Right\":\n        \n          head = [x, y + 2];\n        \n        break;\n      case \"Left\":\n        \n          head = [x, y - 2];\n        \n        break;\n      case \"Up\":\n        \n          head = [x - 2, y];\n        \n        break;\n      default:\n        \n          head = [x + 2, y];\n        \n        break;\n    }\n    dots.push(head);\n    dots.shift();\n    this.setState({ snakeDots: dots });\n  };\n  checkIfOutOfBorders = () => {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      this.onGameOver();\n    }\n  };\n  checkIfCollapsed = () => {\n    let snake = [...this.state.snakeDots];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach((dot) => {\n      if (head[0] === dot[0] && head[1] === dot[1]) {\n        this.onGameOver();\n      }\n    });\n  };\n  CheckIfEat = () => {\n    let snake = [...this.state.snakeDots];\n    let head = snake[snake.length - 1];\n    let food = this.state.food;\n    if (head[0] === food[0] && head[1] === food[1]) {\n      this.setState({ food: getRandomCoordinates() });\n      this.enlargeSnake();\n      this.increaseSpeed();\n    }\n  };\n  enlargeSnake = () => {\n    let newSnake = [...this.state.snakeDots];\n    newSnake.unshift([]);\n    this.setState({\n      snakeDots: newSnake,\n    });\n  };\n  increaseSpeed = () => {\n    if (this.state.speed > 10) {\n      this.setState({\n        speed: this.state.speed - 10,\n      });\n    }\n  };\n  onGameOver = () => {\n    alert(\"GAME OVER YOUR RESULT IS : \" + this.state.snakeDots.length);\n    this.setState(initState);\n  };\n  render() {\n    return (\n      <div className=\"game-area\">\n        <Snake snakeDots={this.state.snakeDots} />\n        <SnakeFood dot={this.state.food} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}